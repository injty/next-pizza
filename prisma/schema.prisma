generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id         Int      @id @default(autoincrement())
  fullname   String
  email      String   @unique
  password   String
  role       UserRole @default(USER)
  provider   String?
  providerId String?
  verified   DateTime
  createddAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  ingredients Ingredient[]
  items       ProductItem[]
}

model ProductItem {
  id        Int  @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?

  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id])
  productId Int
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  products  Product[]
}

model Cart {
  id          Int      @id @default(autoincrement())
  token       String?
  totalAmount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items  CartItem[]
  user   User?      @relation(fields: [userId], references: [id])
  userId Int?       @unique
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart          Cart         @relation(fields: [cartId], references: [id])
  cartId        Int
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId Int
  ingredients   Ingredient[]
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

model Order {
  id          Int         @id @default(autoincrement())
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  email       String
  phone       String
  address     String
  comment     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@unique([userId, code])
}
